소개 , 설치 및 데이터 모델링

소개 
MongoDB 는 C++ 로 작성된 오픈소스 문서지향(Document-Oriented) 적 Cross-platform 데이터 베이스 이며, 뛰어난 확장성과 성능을 자랑한다. 또한 현존하는 NoSQL데이터베이스 중 인지도 1위를 유지하고 있다.

NoSQL ?
흔히 NoSQL이라고 해서, SQL이 없는 데이터 베이스 라고 생각하기 쉽다.
진짜 의미는 Not Only SQL 이다. 기존의 RDBMS의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터 저장소이다. 관계형 DB가 아니므로 , RDMS처럼 고정된 스키마 및 JOIN 이 존재하지 않는다.

Document ?
Document Oriented 데이터 베이스 라는데 ? 여기서 말하는 Document란 ? 
여기서 Document를 그냥 문서라고 번역해버리면 조금 애매하다. 문서라고 하면 보통 워드/엑셀 에 사용되는 그냥 문서가 떠오르기 때문이다. 그것과는 달리 Document는 RDMS의 record 와 비슷한 개념이다. 
이의 데이터 구조는 한개 이상의 key-value pair 으로 이뤄져 있다. 
MongoDB 샘플 Documnet를 확인해 보자.

{
	"_id" : ObjectId("5099703df3f4948bd2f98391"),
	"username": "yeoandante",
	"name" : {first: "unseo", last:"Yeo"}
}

여기서 _id, username,name 은 key 이고 그 오른쪽에 있는 값들은 value이다.
_id 는 12bytes의 hexadecimal 값으로, 각 document의 유일함(uniqueness)을 제공한다.
이 값의 첫 4bytes는 현재 timestamp, 다음 3bytes는 machine id , 다음 2bytes는 MongoDB 서버의 프로세스 id, 마지막 3bytes는 순차번호이다. 추가될떄마다 값이 높아진다.
Document는 동적의 schema를 갖고있다. 같은 Collection 안에 있는 Document끼리 다른 schema를 갖고 있을 수 있는데, 쉽게말하면 서로 다른 데이터(즉 다른 key)들을 가지고 있을 수 있다.

Collection ? 

Collection은 MongoDB Document의 그룹이다. Document들이 Collection 내부에 위치하고 있다. RDMS의 table과 비슷한 개념이다.
RDMS와 달리 schema를 따로 가지고 있지 않다. Document 부분 설명에 나와있듯이 각 Document들이 동적인 schema를 가지고 있기 떄문ㅇ이다.

Database ?
Database는 Collection 들의 물리적인 컨테이너이다. 각 Database는 파일 시스템에 여러 파일들로 저장된다.

장점
- Schema-less (Schema가 없다. 같은 Collection 안에 있을지라도 다른 Schema를 가지고 있을 수 있다)
- 각 객체의 구조가 뚜렷하다
- 복잡한 JOIN 이 없다.
- Deep Query ability (문서지향적 Query Language 를 사용하여 SQL 만큼 강력한 Query 성능을 제공한다.
- 어플리케이션에서 사용되는 객체를 데이터베이스에 추가 할 때 Conversion / Mapping이 불필요하다.

Mongoose 는 MongoDB 기반 ODM (Object Data Mapping) Node.js 전용 라이브러리이다. ODM은 데이터베이스와 객체지향 프로그래밍 언어 사이 호환되지 않는 데이터를 변환하는 프로그래밍 기법입니다. 즉 MongoDB 에 있는 데이터를 Application에서 JavaScript 객체로 사용 할 수 있도록 해준다.

Express : 웹 프레임워크
body-parser : 데이터 처리 미들웨어
mongoose : MongoDB 연동 라이브러리


Express 로 이용한 웹서버 생성
mongoose를 사용하기 위해서 우선 book 데이터를 조회 수정 삭제 하는 간단한 RESTful 웹서버 를 작성한다.
이 서버에서 만들 API 목록은 
ROUTE				METHOD		DESCRIPTION
/api/books			GET			모든 book 데이터 조회
/api/books/:book_id		GET		_id 값으로 데이터 조회
/api/books/author/:author  GET		author 값으로 데이터 조회
/api/books					POST	book 데이터 생성
/api/books/:book_id			PUT		book 데이터 수정
/api/books/:book_id			DELETE	book 데이터 제거



Schema 에서 사용되는 SchemaType은 총 8종류가 있다.
1. String
2. Number
3. Date
4. Buffer
5. Boolean
6. Mixed
7. ObjectId
8. Array

// https://mongoosejs.com/docs/schematypes.html 메뉴얼
